#!/usr/bin/env node
// scripts/page-blueprinter.mjs
// Minimal CLI to turn a blueprint JSON into a Next.js page file.
// Usage: node scripts/page-blueprinter.mjs --input blueprint.json --output app/solutions/draft/page.tsx

import fs from 'node:fs/promises'
import path from 'node:path'

function parseArgs(argv) {
  const args = {}
  for (let i = 2; i < argv.length; i++) {
    const a = argv[i]
    if (a === '--input' || a === '-i') args.input = argv[++i]
    else if (a === '--output' || a === '-o') args.output = argv[++i]
  }
  return args
}

function unique(arr) { return Array.from(new Set(arr)) }

function compileNextPage(blueprint) {
  const importsByPath = new Map()
  for (const s of blueprint.sections) {
    const arr = importsByPath.get(s.importPath) || []
    arr.push(s.importName)
    importsByPath.set(s.importPath, arr)
  }

  const importLines = Array.from(importsByPath.entries()).map(([p, names]) => {
    const uniqueNames = unique(names).sort()
    return `import { ${uniqueNames.join(', ')} } from '${p}'`
  })

  const body = blueprint.sections
    .map((s) => {
      const obj = s.props || {}
      const propString = Object.entries(obj)
        .map(([k, v]) => `${k}={${JSON.stringify(v)}}`)
        .join(' ')
      return `<${s.importName}${propString ? ' ' + propString : ''} />`
    })
    .join('\n\n      ')

  return `// Generated by page-blueprinter\n\n${importLines.join('\n')}\n\nexport default function Page() {\n  return (\n    <>\n      ${body}\n    </>\n  )\n}\n`
}

async function main() {
  const { input, output } = parseArgs(process.argv)
  if (!input || !output) {
    console.error('Usage: node scripts/page-blueprinter.mjs --input blueprint.json --output app/solutions/draft/page.tsx')
    process.exit(1)
  }
  const json = JSON.parse(await fs.readFile(input, 'utf-8'))
  if (!json || !Array.isArray(json.sections)) {
    console.error('Invalid blueprint JSON. Expected an object with sections: []')
    process.exit(1)
  }
  const content = compileNextPage(json)
  await fs.mkdir(path.dirname(output), { recursive: true })
  await fs.writeFile(output, content, 'utf-8')
  console.log(`Wrote ${output}`)
}

main().catch((err) => {
  console.error(err)
  process.exit(1)
})

